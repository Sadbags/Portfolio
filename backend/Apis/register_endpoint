from flask import Blueprint, request, jsonify, abort
from flask_jwt_extended import jwt_required, create_access_token, get_jwt_identity, get_jwt
from werkzeug.security import generate_password_hash
from backend.models.register import Register
from backend.database import db


register_blueprint = Blueprint('register_blueprint', __name__)

@register_blueprint.route('/register', methods=['POST'])
@jwt_required()
def register_user():
    claims = get_jwt()  # Obtener los claims adicionales como is_admin

    # Verificar si el usuario tiene permisos de administrador
    if not claims.get('is_admin'):
        abort(403, description='Admin rights required')

    # Validar la entrada del usuario
    data = request.json
    if not data:
        abort(400, description='Missing JSON request body')

    # Asegurarse que email y password están presentes
    if 'email' not in data or 'password' not in data:
        abort(400, description='Missing required fields: email and/or password')

    email = data.get('email')
    password = data.get('password')

    if '@' not in email:
        abort(400, description='Invalid email format')

    if not password or password.strip() == '':
        return jsonify({"error": "Password cannot be empty"}), 400

    first_name = data.get('first_name', "")
    last_name = data.get('last_name', "")
    user_type = data.get('user_type', "client")
    street = data.get('street', "")
    city = data.get('city', "")
    phone = data.get('phone', "")
    state = data.get('state', "")
    zip_code = data.get('zip_code', "")

    # Verificar si el usuario ya existe
    existing_user = Register.query.filter_by(email=email).first()
    if existing_user:
        abort(400, description='User with this email already exists')

    # Encriptar la contraseña
    password_hash = bcrypt.generate_password_hash(password).decode('utf-8')

    # Crear un nuevo registro de usuario
    new_user = Register(
        email=email,
        first_name=first_name,
        last_name=last_name,
        password=password,  # Encriptada por el modelo
        is_admin=data.get('is_admin', False),  # Valor por defecto es False
        user_type=user_type,
        street=street,
        city=city,
        phone=phone,
        state=state,
        zip_code=zip_code
    )

    # Establecer la contraseña encriptada
    new_user.set_password(password)

    try:
        # Guardar el nuevo usuario en la base de datos
        db.session.add(new_user)
        db.session.commit()

        return jsonify({"msg": "User created successfully", "user_id": user.id}), 201

    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500
